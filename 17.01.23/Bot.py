import logging
import asyncio

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('LogTag')

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from config import TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("Hello!")

@dp.message_handler()
async def hello_response(msg:types.Message):
    if "–ø—Ä–∏–≤–µ—Ç" in msg.text.lower():
        await bot.send_message(msg.from_user.id,f"–ø—Ä–∏–≤,{msg.from_user.first_name}")
    elif "–ø–æ–∫–∞" in msg.text.lower():
        await bot.send_message(msg.from_user.id,f"–£ –º–µ–Ω—è –Ω–µ—Ç –Ω–∏ –º–∞–ª–µ–π—à–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è, –∫–∞–∫ –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –≤–∞—Å –∑–∞ –≤—Å–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–æ –º–Ω–æ–π. –û–Ω–∏ –±—É–¥—É—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–æ–º–∞—Ö–∏–≤–∞—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –¥–∞–ª–µ–∫–æ –º—ã –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞, –¥–æ—Å–≤–∏–¥–∞–Ω–∏—è {msg.from_user.first_name}!")
    elif "–∫—Ç–æ —Ç—ã?" in msg.text.lower():
        await bot.send_message(msg.from_user.id,f"–Ø —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–ô –∞–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞.")
# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
import telebot
from pymongo import MongoClient


bot = telebot.TeleBot("1900611774:AAHd_83i63kFcNbXb92q2Hmb3zX-Yc7qeVs")


class DataBase:
	def __init__(self):
		cluster = MongoClient("mongodb+srv://user:12345@cluster0.jgito.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")

		self.db = cluster["QuizBot"]
		self.users = self.db["Users"]
		self.questions = self.db["Questions"]

		self.questions_count = len(list(self.questions.find({})))

	def get_user(self, chat_id):
		user = self.users.find_one({"chat_id": chat_id})

		if user is not None:
			return user

		user = {
			"chat_id": chat_id,
			"is_passing": False,
			"is_passed": False,
			"question_index": None,
			"answers": []
		}

		self.users.insert_one(user)

		return user

	def set_user(self, chat_id, update):
		self.users.update_one({"chat_id": chat_id}, {"$set": update})

	def get_question(self, index):
		return self.questions.find_one({"id": index})

db = DataBase()


@bot.message_handler(commands=["start"])
def start(message):
	user = db.get_user(message.chat.id)

	if user["is_passed"]:
		bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. –í—Ç–æ—Ä–æ–π —Ä–∞–∑ –ø—Ä–æ–π—Ç–∏ –Ω–µ–ª—å–∑—è üò•")
		return

	if user["is_passing"]:
		return

	db.set_user(message.chat.id, {"question_index": 0, "is_passing": True})

	user = db.get_user(message.chat.id)
	post = get_question_message(user)
	if post is not None:
		bot.send_message(message.from_user.id, post["text"], reply_markup=post["keyboard"])

@bot.callback_query_handler(func=lambda query: query.data.startswith("?ans"))
def answered(query):
	user = db.get_user(query.message.chat.id)

	if user["is_passed"] or not user["is_passing"]:
		return

	user["answers"].append(int(query.data.split("&")[1]))
	db.set_user(query.message.chat.id, {"answers": user["answers"]})

	post = get_answered_message(user)
	if post is not None:
		bot.edit_message_text(post["text"], query.message.chat.id, query.message.id,
						 reply_markup=post["keyboard"])

@bot.callback_query_handler(func=lambda query: query.data == "?next")
def next(query):
	user = db.get_user(query.message.chat.id)

	if user["is_passed"] or not user["is_passing"]:
		return

	user["question_index"] += 1
	db.set_user(query.message.chat.id, {"question_index": user["question_index"]})

	post = get_question_message(user)
	if post is not None:
		bot.edit_message_text(post["text"], query.message.chat.id, query.message.id,
						 reply_markup=post["keyboard"])


def get_question_message(user):
	if user["question_index"] == db.questions_count:
		count = 0
		for question_index, question in enumerate(db.questions.find({})):
			if question["correct"] == user["answers"][question_index]:
				count += 1
		percents = round(100 * count / db.questions_count)

		if percents < 40:
			smile = "üò•"
		elif percents < 60:
			smile = "üòê"
		elif percents < 90:
			smile = "üòÄ"
		else:
			smile = "üòé"

		text = f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {percents}% –≤–æ–ø—Ä–æ—Å–æ–≤ {smile}"

		db.set_user(user["chat_id"], {"is_passed": True, "is_passing": False})

		return {
			"text": text,
			"keyboard": None
		}

	question = db.get_question(user["question_index"])

	if question is None:
		return

	keyboard = telebot.types.InlineKeyboardMarkup()
	for answer_index, answer in enumerate(question["answers"]):
		keyboard.row(telebot.types.InlineKeyboardButton(f"{chr(answer_index + 97)}) {answer}",
														callback_data=f"?ans&{answer_index}"))

	text = f"–í–æ–ø—Ä–æ—Å ‚Ññ{user['question_index'] + 1}\n\n{question['text']}"

	return {
		"text": text,
		"keyboard": keyboard
	}

def get_answered_message(user):
	question = db.get_question(user["question_index"])

	text = f"–í–æ–ø—Ä–æ—Å ‚Ññ{user['question_index'] + 1}\n\n{question['text']}\n"

	for answer_index, answer in enumerate(question["answers"]):
		text += f"{chr(answer_index + 97)}) {answer}"

		if answer_index == question["correct"]:
			text += " ‚úÖ"
		elif answer_index == user["answers"][-1]:
			text += " ‚ùå"

		text += "\n"

	keyboard = telebot.types.InlineKeyboardMarkup()
	keyboard.row(telebot.types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="?next"))

	return {
		"text": text,
		"keyboard": keyboard
	}


bot.polling()